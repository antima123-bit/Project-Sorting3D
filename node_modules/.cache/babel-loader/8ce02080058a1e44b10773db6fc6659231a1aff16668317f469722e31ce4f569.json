{"ast":null,"code":"class AudioManager {\n  constructor() {\n    this.audioContext = null;\n    this.gainNode = null;\n    this.oscillator = null;\n    this.isMuted = true;\n  }\n  initialize() {\n    if (!this.audioContext) {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      this.gainNode = this.audioContext.createGain();\n      this.gainNode.connect(this.audioContext.destination);\n      this.setVolume(0.1); // Set initial volume\n    }\n  }\n  playNote(value) {\n    if (this.isMuted) return;\n    this.initialize();\n\n    // Stop previous oscillator if exists\n    if (this.oscillator) {\n      this.oscillator.stop();\n      this.oscillator.disconnect();\n    }\n\n    // Create and configure oscillator\n    this.oscillator = this.audioContext.createOscillator();\n    this.oscillator.connect(this.gainNode);\n\n    // Map array value to frequency (between 220Hz and 880Hz)\n    const frequency = 220 + value * 3;\n    this.oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n\n    // Use sine wave for a more melodic sound\n    this.oscillator.type = 'sine';\n\n    // Add slight reverb effect\n    const convolver = this.audioContext.createConvolver();\n    const reverbTime = 2;\n    const decay = 0.1;\n    const rate = 44100;\n    const length = rate * reverbTime;\n    const impulse = this.audioContext.createBuffer(2, length, rate);\n    for (let channel = 0; channel < 2; channel++) {\n      const impulseData = impulse.getChannelData(channel);\n      for (let i = 0; i < length; i++) {\n        impulseData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / length, decay);\n      }\n    }\n    convolver.buffer = impulse;\n    this.oscillator.connect(convolver);\n    convolver.connect(this.gainNode);\n\n    // Start and stop the note with a slight envelope\n    const now = this.audioContext.currentTime;\n    this.gainNode.gain.setValueAtTime(0, now);\n    this.gainNode.gain.linearRampToValueAtTime(0.1, now + 0.01);\n    this.gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.1);\n    this.oscillator.start();\n    this.oscillator.stop(now + 0.1);\n  }\n  toggle() {\n    this.isMuted = !this.isMuted;\n    if (!this.isMuted) {\n      this.initialize();\n    }\n    return !this.isMuted;\n  }\n  setVolume(value) {\n    if (this.gainNode) {\n      this.gainNode.gain.setValueAtTime(value, this.audioContext.currentTime);\n    }\n  }\n}\nexport const audioManager = new AudioManager();","map":{"version":3,"names":["AudioManager","constructor","audioContext","gainNode","oscillator","isMuted","initialize","window","AudioContext","webkitAudioContext","createGain","connect","destination","setVolume","playNote","value","stop","disconnect","createOscillator","frequency","setValueAtTime","currentTime","type","convolver","createConvolver","reverbTime","decay","rate","length","impulse","createBuffer","channel","impulseData","getChannelData","i","Math","random","pow","buffer","now","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","start","toggle","audioManager"],"sources":["C:/Users/hp/DS/Downloads/Final/src/utils/audioContext.js"],"sourcesContent":["class AudioManager {\n    constructor() {\n        this.audioContext = null;\n        this.gainNode = null;\n        this.oscillator = null;\n        this.isMuted = true;\n    }\n\n    initialize() {\n        if (!this.audioContext) {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            this.gainNode = this.audioContext.createGain();\n            this.gainNode.connect(this.audioContext.destination);\n            this.setVolume(0.1); // Set initial volume\n        }\n    }\n\n    playNote(value) {\n        if (this.isMuted) return;\n        \n        this.initialize();\n\n        // Stop previous oscillator if exists\n        if (this.oscillator) {\n            this.oscillator.stop();\n            this.oscillator.disconnect();\n        }\n\n        // Create and configure oscillator\n        this.oscillator = this.audioContext.createOscillator();\n        this.oscillator.connect(this.gainNode);\n\n        // Map array value to frequency (between 220Hz and 880Hz)\n        const frequency = 220 + (value * 3);\n        this.oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n\n        // Use sine wave for a more melodic sound\n        this.oscillator.type = 'sine';\n\n        // Add slight reverb effect\n        const convolver = this.audioContext.createConvolver();\n        const reverbTime = 2;\n        const decay = 0.1;\n        const rate = 44100;\n        const length = rate * reverbTime;\n        const impulse = this.audioContext.createBuffer(2, length, rate);\n        \n        for (let channel = 0; channel < 2; channel++) {\n            const impulseData = impulse.getChannelData(channel);\n            for (let i = 0; i < length; i++) {\n                impulseData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / length, decay);\n            }\n        }\n        \n        convolver.buffer = impulse;\n        this.oscillator.connect(convolver);\n        convolver.connect(this.gainNode);\n\n        // Start and stop the note with a slight envelope\n        const now = this.audioContext.currentTime;\n        this.gainNode.gain.setValueAtTime(0, now);\n        this.gainNode.gain.linearRampToValueAtTime(0.1, now + 0.01);\n        this.gainNode.gain.exponentialRampToValueAtTime(0.01, now + 0.1);\n        \n        this.oscillator.start();\n        this.oscillator.stop(now + 0.1);\n    }\n\n    toggle() {\n        this.isMuted = !this.isMuted;\n        if (!this.isMuted) {\n            this.initialize();\n        }\n        return !this.isMuted;\n    }\n\n    setVolume(value) {\n        if (this.gainNode) {\n            this.gainNode.gain.setValueAtTime(value, this.audioContext.currentTime);\n        }\n    }\n}\n\nexport const audioManager = new AudioManager();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}