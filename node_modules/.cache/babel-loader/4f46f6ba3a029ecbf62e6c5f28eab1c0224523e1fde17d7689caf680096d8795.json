{"ast":null,"code":"export const bubbleSort = async (array, compare, swap) => {\n  const n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      await compare(j, j + 1);\n      if (array[j] > array[j + 1]) {\n        await swap(array, j, j + 1);\n      }\n    }\n  }\n};\nexport const selectionSort = async (array, compare, swap) => {\n  const n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < n; j++) {\n      await compare(minIdx, j);\n      if (array[j] < array[minIdx]) {\n        minIdx = j;\n      }\n    }\n    if (minIdx !== i) {\n      await swap(array, i, minIdx);\n    }\n  }\n};\nexport const insertionSort = async (array, compare, swap) => {\n  const n = array.length;\n  for (let i = 1; i < n; i++) {\n    let key = array[i];\n    let j = i - 1;\n    while (j >= 0 && array[j] > key) {\n      await compare(j, j + 1);\n      array[j + 1] = array[j];\n      j = j - 1;\n    }\n    array[j + 1] = key;\n  }\n};\nexport const mergeSort = async (array, compare, swap, markSorted, setArray) => {\n  const merge = async (left, mid, right) => {\n    const n1 = mid - left + 1;\n    const n2 = right - mid;\n    const L = array.slice(left, mid + 1);\n    const R = array.slice(mid + 1, right + 1);\n    let i = 0,\n      j = 0,\n      k = left;\n    while (i < n1 && j < n2) {\n      await compare(left + i, mid + 1 + j);\n      if (L[i] <= R[j]) {\n        array[k] = L[i];\n        i++;\n      } else {\n        array[k] = R[j];\n        j++;\n      }\n      setArray([...array]);\n      k++;\n    }\n    while (i < n1) {\n      array[k] = L[i];\n      setArray([...array]);\n      i++;\n      k++;\n    }\n    while (j < n2) {\n      array[k] = R[j];\n      setArray([...array]);\n      j++;\n      k++;\n    }\n  };\n  const mergeSortHelper = async (left, right) => {\n    if (left < right) {\n      const mid = Math.floor((left + right) / 2);\n      await mergeSortHelper(left, mid);\n      await mergeSortHelper(mid + 1, right);\n      await merge(left, mid, right);\n    }\n  };\n  await mergeSortHelper(0, array.length - 1);\n};\nexport const quickSort = async (array, compare, swap, markSorted, setArray) => {\n  const partition = async (low, high) => {\n    const pivot = array[high];\n    let i = low - 1;\n    for (let j = low; j < high; j++) {\n      await compare(j, high);\n      if (array[j] < pivot) {\n        i++;\n        await swap(array, i, j);\n      }\n    }\n    await swap(array, i + 1, high);\n    return i + 1;\n  };\n  const quickSortHelper = async (low, high) => {\n    if (low < high) {\n      const pi = await partition(low, high);\n      await quickSortHelper(low, pi - 1);\n      await quickSortHelper(pi + 1, high);\n    }\n  };\n  await quickSortHelper(0, array.length - 1);\n};","map":{"version":3,"names":["bubbleSort","array","compare","swap","n","length","i","j","selectionSort","minIdx","insertionSort","key","mergeSort","markSorted","setArray","merge","left","mid","right","n1","n2","L","slice","R","k","mergeSortHelper","Math","floor","quickSort","partition","low","high","pivot","quickSortHelper","pi"],"sources":["C:/Users/hp/DS/Downloads/Final/src/algorithms/sortingAlgorithms.js"],"sourcesContent":["export const bubbleSort = async (array, compare, swap) => {\n  const n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      await compare(j, j + 1);\n      if (array[j] > array[j + 1]) {\n        await swap(array, j, j + 1);\n      }\n    }\n  }\n};\n\nexport const selectionSort = async (array, compare, swap) => {\n  const n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    for (let j = i + 1; j < n; j++) {\n      await compare(minIdx, j);\n      if (array[j] < array[minIdx]) {\n        minIdx = j;\n      }\n    }\n    if (minIdx !== i) {\n      await swap(array, i, minIdx);\n    }\n  }\n};\n\nexport const insertionSort = async (array, compare, swap) => {\n  const n = array.length;\n  for (let i = 1; i < n; i++) {\n    let key = array[i];\n    let j = i - 1;\n    while (j >= 0 && array[j] > key) {\n      await compare(j, j + 1);\n      array[j + 1] = array[j];\n      j = j - 1;\n    }\n    array[j + 1] = key;\n  }\n};\n\nexport const mergeSort = async (array, compare, swap, markSorted, setArray) => {\n  const merge = async (left, mid, right) => {\n    const n1 = mid - left + 1;\n    const n2 = right - mid;\n    const L = array.slice(left, mid + 1);\n    const R = array.slice(mid + 1, right + 1);\n\n    let i = 0, j = 0, k = left;\n\n    while (i < n1 && j < n2) {\n      await compare(left + i, mid + 1 + j);\n      if (L[i] <= R[j]) {\n        array[k] = L[i];\n        i++;\n      } else {\n        array[k] = R[j];\n        j++;\n      }\n      setArray([...array]);\n      k++;\n    }\n\n    while (i < n1) {\n      array[k] = L[i];\n      setArray([...array]);\n      i++;\n      k++;\n    }\n\n    while (j < n2) {\n      array[k] = R[j];\n      setArray([...array]);\n      j++;\n      k++;\n    }\n  };\n\n  const mergeSortHelper = async (left, right) => {\n    if (left < right) {\n      const mid = Math.floor((left + right) / 2);\n      await mergeSortHelper(left, mid);\n      await mergeSortHelper(mid + 1, right);\n      await merge(left, mid, right);\n    }\n  };\n\n  await mergeSortHelper(0, array.length - 1);\n};\n\nexport const quickSort = async (array, compare, swap, markSorted, setArray) => {\n  const partition = async (low, high) => {\n    const pivot = array[high];\n    let i = low - 1;\n\n    for (let j = low; j < high; j++) {\n      await compare(j, high);\n      if (array[j] < pivot) {\n        i++;\n        await swap(array, i, j);\n      }\n    }\n    await swap(array, i + 1, high);\n    return i + 1;\n  };\n\n  const quickSortHelper = async (low, high) => {\n    if (low < high) {\n      const pi = await partition(low, high);\n      await quickSortHelper(low, pi - 1);\n      await quickSortHelper(pi + 1, high);\n    }\n  };\n\n  await quickSortHelper(0, array.length - 1);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}